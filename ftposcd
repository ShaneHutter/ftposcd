#!/usr/bin/python3
"""
Fishman Tripleplay MIDI to OSC converter
    tripleplay_osc.py

    Written By:
        Shane Hutter

    Connect to Fishman triple play via ALSA (maybe JACK?) and convert midi data over any
    recieved MIDI channels to Open Sound Control messages, and send them to a target
    host.  Ideally this host will run OSC Whispers, and forward the messages elsewhere.


    Notes:
        * User must be part of the audio group for MIDI port access
        * exit the main loop with both an OSC, and a CC midi message
            or better yet sysexe midi message (harder to fuck up live)
        * This tends to crash if the FTP is turned off at the pickup.
        * Midi channel 7 is used for communication between pickup and controller
            - can cause issues, may be best not to send into FTP
            - should be ok for converting FTP output to control things
                -- The guitar/suth switch may be agood control
        * Integer values must be limited due to MIDI using a signed byte
            - int() % MAX_SIGNED_BYTE
"""

from argparse   import ArgumentParser
from liblo      import ServerError
from mido       import open_input
from sys        import exit
from time       import sleep
from FTP        import (
        INPUT   , MIDI_PICKUP_NAME  , OUTPUT    ,
        LATENCY ,
        )
from FTP.config import (
        load_config ,
        )
from FTP.midi   import (
        ftp_inputs              , ftp_outputs   ,
        midi_dict               , midi_tuple    ,
        FTP_FIRST_DEVICE_INDEX  ,
        )
from FTP.osc    import (
        osc_target  , register_ftp_osc_input    , send_osc_midi ,
        OSCServer   ,
        osc_path    , osc_path_format           ,
        )


DEBUG   = True

def main():
    """
        Main code block
    """

    # Load the configuration file
    config_data = load_config()
    
    # Create OSC Client targets
    osc_client_target   = osc_target( 
            config_data[ "remote-osc-host" ]    , 
            config_data[ "remote-osc-port" ]    ,
            )

    # Open a midi input connection to the first ftp input
    '''
        OSCServer inherits from ServerThread.  Wrap this with in a try, except block
            to catch ServerError in case the osc_server fails from not having access
            to the required listing port
    '''
    with open_input(
           ftp_inputs()[ FTP_FIRST_DEVICE_INDEX ] 
            ) as midi_in , OSCServer( 
                        config_data[ "local-osc-port" ]
                        ) as ftp_osc_server:

                # Register OSC methods for the FTP
                register_ftp_osc_input( ftp_osc_server )

                # Main loop
                alive   = True
                while alive:
                    
                    # Incoming MIDI to outgoing OSC
                    for message in midi_in.iter_pending():
                        if "channel" in midi_dict( message ):
                            osc_path_format.update(
                                    direction   = OUTPUT    ,
                                    channel     = midi_dict( message )[ "channel" ] ,
                                    )
                        else:
                            # Need to work out why the midi data has no channel (SysEx?)
                            osc_path_format.update(
                                    direction   = OUTPUT    ,
                                    channel     = "None"    ,
                                    )

                        # Send recieved midi messages as osc
                        send_osc_midi(
                                osc_client_target                       ,
                                osc_path.format( **osc_path_format )    ,
                                midi_tuple( message )                   ,
                                )
                    
                    # Sleep for latency
                    '''
                        reduce cpu with unrestrained looping
                        replace with the OSC listening latency
                    '''
                    sleep( LATENCY )
    return



if __name__ == "__main__":
    if DEBUG:
        main()
    else:
        try:
            main()
        except Exception as error:
            exit( error )
